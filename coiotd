#! /usr/bin/env python

from gi.repository import GLib
import pydbus
import coiot.dbus
from coiot.device import CoiotDevice
from coiot.db import CoiotDB
import logging
import sys
import argparse

log = logging.getLogger('coiotd')

if __name__ == "__main__":
    ap = argparse.ArgumentParser(description='COIoT devices control daemon')
    ap.add_argument('-d', '--db', default='/tmp/coiot.db',
                    help='database file')
    ap.add_argument('-v', '--verbose', action='store_true', default=False,
                    help='verbose logs')
    ap.add_argument('--mock', action='store_true', default=False,
                    help='Mock drivers instead of using the real drivers.')

    args = ap.parse_args()

    for logn in 'DB', 'DBus', 'Device', 'BLE', 'Test':
        log = logging.getLogger(logn)
        log.addHandler(logging.StreamHandler(sys.stdout))
        if args.verbose:
            log.level = logging.DEBUG
        else:
            log.level = logging.WARNING

    if args.mock:
        import test.mock_driver
        test.mock_driver.register()
    else:
        import ble.bluez
        from ble.client import BleClient
        import ble.driver

    db = CoiotDB(args.db)

    if not args.mock:
        adapter = ble.bluez.DBusBluez().adapters['hci0']
        client = BleClient(adapter)
        driver = ble.driver.BluezBLEDriver(client)

    updates = set()
    devices = CoiotDevice.load(db, updates.add)

    def idle_push_updates():
        if args.mock:
            for d, u in test.mock_driver.MockDriverDevice.update_list.items():
                while u:
                    k, v = u.popitem()
                    d.queue_update(k, v)
                    updates.add(d)
                    log.debug("mock {} {} = {}".format(d, k, v))

        while updates:
            d = updates.pop()
            d.update()
            log.debug('updated {}'.format(d))
        return True

    bus = coiot.dbus.CoiotDBus(pydbus.SystemBus())
    for device in devices:
        coiot.dbus.DBusDevice(bus, device)

    loop = GLib.MainLoop()
    GLib.timeout_add(100, idle_push_updates)
    try:
        loop.run()
    finally:
        if not args.mock:
            driver.thread.stop()
